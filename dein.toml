[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
#build = 'make'
hook_post_update = '''
if has('win32')
    let cmd = 'tools\\update-dll-mingw'
elseif has('win32unix') " for Cygwin
    let cmd = 'make -f make_cygwin.mak'
elseif executable('gmake')
    let cmd = 'gmake'
else
    let cmd = 'make'
endif
let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'vim-syntastic/syntastic'
hook_add='''
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {'colorscheme': 'wombat'}
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'Shougo/deol.nvim'

[[plugins]]
if = 0
repo = 'Shougo/denite.nvim'
hook_add = '''
" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q denite#do_map('quit')
    nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
endfunction
'''

# 補完
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_source = '''
call deoplete#custom#option("enable_ignore_case", v:true)
call deoplete#custom#option("enable_smart_case", v:true)
let g:deoplete#enable_at_startup = 1
'''
on_i = 1

# Vim LSP
[[plugins]]
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'

[[plugins]]
repo = 'mattn/vim-lsp-settings'

# ZSH
[[plugins]]
repo = 'zchee/deoplete-zsh'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'powerline/powerline'

# LSP Manager
[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
rev = 'release'

# TOML
[[plugins]]
repo = 'cespare/vim-toml'

# Async Lint Engine
#[[plugins]]
#repo = 'w0rp/ale'

# Syntax Highlighting Tool
[[plugins]]
repo = 'sheerun/vim-polyglot'

# Vim emoji
[[plugins]]
repo = 'junegunn/vim-emoji'

# PostFix ext
[[plugins]]
repo = 'mattn/vim-sonictemplate'

# airline
[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
" モードの表示名を定義(デフォルトだと長くて横幅を圧迫するので略称にしている)
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 's'  : 'S',
    \ }

" パワーラインでかっこよく
let g:airline_powerline_fonts = 1
" カラーテーマ指定してかっこよく
"let g:airline_theme = 'badwolf'
" タブバーをかっこよく
let g:airline#extensions#tabline#enabled = 1

" 選択行列の表示をカスタム(デフォルトだと長くて横幅を圧迫するので最小限に)
let g:airline_section_z = airline#section#create(['windowswap', '%3p%% ', 'linenr', ':%3v'])

" virtulenvを認識しているか確認用に、現在activateされているvirtualenvを表示(vim-virtualenvの拡張)
let g:airline#extensions#virtualenv#enabled = 1

" gitのHEADから変更した行の+-を非表示(vim-gitgutterの拡張)
let g:airline#extensions#hunks#enabled = 0

" Lintツールによるエラー、警告を表示(ALEの拡張)
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#ale#error_symbol = 'E:'
let g:airline#extensions#ale#warning_symbol = 'W:'
'''

# deoplete for python
#[[plugins]]
#repo = 'deoplete-plugins/deoplete-jedi'

# highlight based on the code block the cursor currently resides in
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['Shougo/context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'preservim/nerdcommenter'
hook_add = '''
nnoremap <silent> <leader>c} V}:call nerdcommenter#Comment('x', 'toggle')<CR>
nnoremap <silent> <leader>c{ V{:call nerdcommenter#Comment('x', 'toggle')<CR>
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
'''
